{
  "name": "gettext",
  "scopeName": "source.po",
  "patterns": [
    {
      "begin": "^\\s*$|^(?=msgid(_plural)?|msgctxt)",
      "end": "\\z",
      "patterns": [
        {
          "include": "#body"
        }
      ]
    },
    {
      "include": "#comments"
    },
    {
      "name": "comment.line.number-sign.po",
      "match": "^msg(id|str)\\s+\"\"\\s*$"
    }
  ],
  "repository": {
    "body": {
      "name": "meta.item.po",
      "patterns": [
        {
          "name": "meta.scope.msgid.po",
          "begin": "^(msgid(_plural)?) ",
          "end": "^(?!\")",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.msgid.po"
            }
          },
          "patterns": [
            {
              "include": "#strings"
            }
          ]
        },
        {
          "name": "meta.scope.msgctxt.po",
          "begin": "^(msgctxt) ",
          "end": "^(?!\")",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.msgctxt.po"
            }
          },
          "patterns": [
            {
              "include": "#strings"
            }
          ]
        },
        {
          "name": "meta.scope.msgstr.po",
          "begin": "^(msgstr(?:\\[(\\d+)\\])?) ",
          "end": "^(?!\")",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.msgstr.po"
            },
            "2": {
              "name": "constant.numeric.po"
            }
          },
          "patterns": [
            {
              "include": "#strings"
            }
          ]
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.po",
      "match": "(?<!\\\\)\"(.*)(?<!\\\\)\"",
      "captures": {
        "1": {
          "patterns": [
            {
              "name": "constant.character.escape.po",
              "match": "(?x)\\\\\n(\n  [0-7]{1,3}     | # ASCII character in octal notation\n  x[a-fA-F0-9]{2}| # hex regex\n  u[a-fA-F0-9]{4}| # unicode regex (since C99)\n  U[a-fA-F0-9]{8}| # unicode regex (since C99)\n  [abefprtv'\"?\\\\]\n)"
            },
            {
              "name": "constant.character.escape.line-continuation.po",
              "match": "\\\\n"
            }
          ]
        }
      }
    },
    "comments": {
      "name": "comment.line.number-sign.po",
      "begin": "^#",
      "end": "$",
      "patterns": [
        {
          "name": "comment.line.number-sign.extracted.po",
          "begin": "\\.\\s+",
          "end": "$"
        },
        {
          "name": "comment.line.number-sign.previous.po",
          "begin": "\\|\\s*",
          "end": "$"
        },
        {
          "name": "comment.line.number-sign.reference.po",
          "begin": ": *",
          "end": "$",
          "patterns": [
            {
              "match": "\\S+:[\\d;]*",
              "name": "storage.type.class.po"
            }
          ]
        },
        {
          "name": "comment.line.number-sign.flag.po",
          "begin": ",\\s+",
          "end": "$",
          "patterns": [
            {
              "match": "(?x)\n(?:\\G|, *)\n(\n  (?:fuzzy)|\n  (?:no-)?(?:\n    c|objc|python|python-brace|java|java-printf|csharp|javascript|\n    scheme|lisp|elisp|librep|ruby|sh|awk|lua|object-pascal|smalltalk|\n    qt|qt-plural|kde|boost|tcl|perl|perl-brace|php|gcc-internal|\n    gfc-internal|ycp\n  )-format\n)",
              "captures": {
                "1": {
                  "name": "entity.name.type.flag.po"
                }
              }
            }
          ]
        }
      ]
    }
  }
}